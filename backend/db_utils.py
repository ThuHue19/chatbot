import oracledb
import os
import re
from dotenv import load_dotenv
import logging
from typing import List, Dict, Union, Optional
import json

from difflib import get_close_matches


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

def get_connection():
    try:
        conn = oracledb.connect(
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            dsn=os.getenv("DB_DSN")
        )
        logger.info("‚úÖ Database connection established.")
        return conn
    except oracledb.DatabaseError as e:
        error, = e.args
        logger.error(f"‚ùå Database connection error: {error.code} - {error.message}")
        raise Exception(f"L·ªói k·∫øt n·ªëi CSDL: {error.code} - {error.message}")

def extract_sql_code(raw_sql: str) -> List[str]:
    import re
    matches = re.findall(r"```sql(.*?)```", raw_sql, re.DOTALL | re.IGNORECASE)
    sqls = []
    if matches:
        for match in matches:
            sql = match.strip()
            if sql.endswith(";"):
                sql = sql[:-1].strip()
            sqls.append(sql)
    else:
        if raw_sql.endswith(";"):
            raw_sql = raw_sql[:-1].strip()
        sqls.append(raw_sql)
    return sqls

def execute_sql(sql_input: str) -> Union[Dict, List[Dict]]:
    sql_statements = extract_sql_code(sql_input)
    all_results = []

    for sql_clean in sql_statements:
        logger.info(f"üîé Executing SQL:\n{sql_clean}")
        try:
            with get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(sql_clean)
                    if cur.description:
                        columns = [desc[0] for desc in cur.description]
                        raw_rows = cur.fetchall()

                        # ƒê·ªçc LOB n·∫øu c√≥
                        rows = [
                            tuple(val.read() if isinstance(val, oracledb.LOB) else val for val in row)
                            for row in raw_rows
                        ]

                        # ‚úÖ tr·∫£ v·ªÅ to√†n b·ªô d·ªØ li·ªáu
                        result = {"columns": columns, "rows": rows, "total_rows": len(rows)}

                        logger.info(f"‚úÖ SQL execution successful with {len(rows)} rows.")
                        all_results.append(result)
                    else:
                        message = "‚úÖ Th·ª±c thi th√†nh c√¥ng, kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ."
                        logger.info(message)
                        all_results.append({"message": message})
                conn.commit()
        except oracledb.DatabaseError as e:
            error, = e.args
            logger.error(f"‚ùå SQL error: {error.code} - {error.message}")
            raise Exception(f"L·ªói CSDL: {error.code} - {error.message}")
        except Exception as e:
            logger.error(f"‚ùå Unexpected error: {str(e)}")
            raise Exception(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")

    # N·∫øu nhi·ªÅu c√¢u l·ªánh SQL, gi·ªØ nguy√™n k·∫øt qu·∫£ t·ª´ng c√¢u l·ªánh
    if len(all_results) == 1:
        return all_results[0]
    return all_results


def detect_dept_column(user_input: str) -> Optional[str]:
    """
    Nh·∫≠n di·ªán xem user n√≥i 'ph√≤ng' hay 't·ªï' ƒë·ªÉ ch·ªçn ƒë√∫ng c·ªôt.
    """
    text = user_input.lower()
    if "ph√≤ng" in text:
        return "PHONG_BAN"
    elif "t·ªï" in text:
        return "TO_NHOM"
    return None
def resolve_dept_code(user_input: str, db_conn) -> Optional[tuple]:
    """
    T·ª´ user_input t√¨m DEPT_CODE t∆∞∆°ng ·ª©ng trong M_DEPARTMENT.
    Tr·∫£ v·ªÅ (dept_code, dept_name).
    """
    cursor = db_conn.cursor()
    cursor.execute("SELECT DEPT_CODE, DEPT_NAME FROM M_DEPARTMENT")
    rows = cursor.fetchall()

    dept_map = {normalize_canhan(name): (code, name) for code, name in rows}
    norm_input = normalize_canhan(user_input)

    matches = get_close_matches(norm_input, dept_map.keys(), n=1, cutoff=0.7)
    if matches:
        return dept_map[matches[0]]
    return None
def build_dept_condition(user_input: str) -> Optional[tuple]:
    """
    Tr·∫£ v·ªÅ (sql_condition, dept_name) n·∫øu t√¨m ƒë∆∞·ª£c ph√≤ng/t·ªï t·ª´ input.
    sql_condition: v√≠ d·ª• "PAKH_TO_NHOM.TO_NHOM = 'DVT_DN_TVT_QN'"
    dept_name: t√™n hi·ªÉn th·ªã c·ªßa ph√≤ng/t·ªï
    """
    column = detect_dept_column(user_input)
    if not column:
        return None

    try:
        with get_connection() as conn:
            match = resolve_dept_code(user_input, conn)
            if match:
                dept_code, dept_name = match
                if column == "PHONG_BAN":
                    sql_condition = f"PAKH_PHONG_BAN.PHONG_BAN = '{dept_code}'"
                else:
                    sql_condition = f"PAKH_TO_NHOM.TO_NHOM = '{dept_code}'"
                return sql_condition, dept_name
    except Exception as e:
        logger.error(f"L·ªói trong build_dept_condition: {e}")
        return None

def fetch_one(sql: str, params: list) -> dict:
    try:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(sql, params)
                row = cur.fetchone()
                if row and cur.description:
                    columns = [desc[0] for desc in cur.description]
                    return dict(zip(columns, row))
                return None
    except Exception as e:
        logger.error(f"L·ªói trong fetch_one: {e}")
        return None

CACHE_JSON_FILE = "locality_cache.json"

def build_locality_cache_json() -> dict:
    sql = "SELECT FULL_NAME, PROVINCE, DISTRICT FROM FB_LOCALITY"
    
    try:
        result = execute_sql(sql)
        rows = result.get("rows", [])
        columns = result.get("columns", [])
        
        cache = {}
        for row in rows:
            row_dict = dict(zip(columns, row))
            full_name = row_dict.get("FULL_NAME")
            province_code = row_dict.get("PROVINCE")
            district_code = row_dict.get("DISTRICT")
            
            if full_name:
                # T√°ch huy·ªán/qu·∫≠n
                district_name = None
                if " H." in full_name:
                    district_name = full_name.split(" H.")[1]
                    if " T." in district_name:
                        district_name = district_name.split(" T.")[0]
                    elif " TP." in district_name:
                        district_name = district_name.split(" TP.")[0]
                    district_name = district_name.strip()
                elif " Q." in full_name:
                    district_name = full_name.split(" Q.")[1]
                    if " T." in district_name:
                        district_name = district_name.split(" T.")[0]
                    elif " TP." in district_name:
                        district_name = district_name.split(" TP.")[0]
                    district_name = district_name.strip()

                # T√°ch t·ªânh/th√†nh ph·ªë
                province_name = None
                if " T." in full_name:
                    province_name = full_name.split(" T.")[1].strip()
                elif " TP." in full_name:
                    province_name = full_name.split(" TP.")[1].strip()
                
                if district_name and province_name:
                    cache[district_name] = {
                        "district_code": district_code,
                        "province_code": province_code,
                        "district_name": district_name,
                        "province_name": province_name
                    }
                    # Th√™m mapping t·ªânh ‚Üí t·ªânh_code, ch·ªâ th√™m m·ªôt l·∫ßn
                if province_name and province_name:
                    cache[province_name] = {
                        "district_code": None,
                        "province_code": province_code,
                        "district_name": None,
                        "province_name": province_name
                    }
        
        with open(CACHE_JSON_FILE, "w", encoding="utf-8") as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ Cache FB_LOCALITY ƒë√£ l∆∞u v√†o {CACHE_JSON_FILE} v·ªõi {len(cache)} b·∫£n ghi.")
        return cache
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi build cache JSON: {e}")
        return {}


def load_locality_cache_json() -> dict:
    """
    Load cache JSON n·∫øu t·ªìn t·∫°i, n·∫øu ch∆∞a c√≥ s·∫Ω t·∫°o m·ªõi.
    """
    if os.path.exists(CACHE_JSON_FILE):
        with open(CACHE_JSON_FILE, "r", encoding="utf-8") as f:
            cache = json.load(f)
        logger.info(f"‚úÖ Cache FB_LOCALITY ƒë√£ ƒë∆∞·ª£c load t·ª´ {CACHE_JSON_FILE}.")
        return cache
    else:
        logger.info("‚ö†Ô∏è Cache JSON ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi t·ª´ DB...")
        return build_locality_cache_json()

def build_dept_cache_json() -> list:
    """
    L·∫•y to√†n b·ªô DEPT_CODE, DEPT_NAME t·ª´ M_DEPARTMENT
    v√† l∆∞u ra file JSON d·∫°ng list[dict].
    """
    sql = "SELECT DEPT_CODE, DEPT_NAME FROM M_DEPARTMENT"

    try:
        result = execute_sql(sql)
        rows = result.get("rows", [])
        columns = result.get("columns", [])
        
        departments = []
        for row in rows:
            row_dict = dict(zip(columns, row))
            dept_code = row_dict.get("DEPT_CODE")
            dept_name = row_dict.get("DEPT_NAME")
            if dept_code and dept_name:
                departments.append({
                    "dept_code": dept_code,
                    "dept_name": dept_name
                })

        with open(DEPT_CACHE_JSON_FILE, "w", encoding="utf-8") as f:
            json.dump(departments, f, ensure_ascii=False, indent=2)

        logger.info(f"‚úÖ Cache M_DEPARTMENT ƒë√£ l∆∞u v√†o {DEPT_CACHE_JSON_FILE} v·ªõi {len(departments)} b·∫£n ghi.")
        return departments

    except Exception as e:
        logger.error(f"‚ùå L·ªói khi build dept cache JSON: {e}")
        return []



DEPT_CACHE_JSON_FILE = "departments.json"
DEPT_CACHE = []  # cache to√†n c·ª•c

def load_dept_cache_json() -> list:
    """
    Load cache departments t·ª´ JSON, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi t·ª´ DB.
    """
    global DEPT_CACHE
    if DEPT_CACHE:  # n·∫øu ƒë√£ load r·ªìi th√¨ kh√¥ng c·∫ßn ƒë·ªçc l·∫°i
        return DEPT_CACHE

    if os.path.exists(DEPT_CACHE_JSON_FILE):
        with open(DEPT_CACHE_JSON_FILE, "r", encoding="utf-8") as f:
            DEPT_CACHE = json.load(f)
        logger.info(f"‚úÖ Cache M_DEPARTMENT ƒë√£ ƒë∆∞·ª£c load t·ª´ {DEPT_CACHE_JSON_FILE}.")
    else:
        logger.info("‚ö†Ô∏è Ch∆∞a c√≥ cache departments.json, t·∫°o m·ªõi t·ª´ DB...")
        DEPT_CACHE = build_dept_cache_json()

    return DEPT_CACHE

